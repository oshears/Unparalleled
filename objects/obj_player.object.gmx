<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_triangle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>friction=0.2;

instance_create(0,0,obj_spawn1);

var button_pressed;

button_pressed="";

///Initialise particles

global.P_System=part_system_create(); //Create the system and give it a name...
global.Particle1=part_type_create();  //Create the particle and give it a name...
part_system_depth(global.P_System,500);

//Define the particle...
part_type_shape(global.Particle1,pt_shape_line) //This defines the particles shape...
part_type_size(global.Particle1,1,1,0,2) //This is for the size...
part_type_scale(global.Particle1,0.1,0.1) //This is for scaling...
part_type_color1(global.Particle1,c_white) //This sets its colour. There are three different codes for this...
part_type_alpha1(global.Particle1,1) //This is its alpha. There are three different codes for this...
part_type_speed(global.Particle1,0.50,2,-0.10,0) //The particles speed...
//part_type_direction(global.Particle1,0,0,0,0) //The direction...
part_type_orientation(global.Particle1,0,0,0,0,1) //This changes the rotation of the particle...
part_type_blend(global.Particle1,1) //This is the blend mode, either additive or normal...
part_type_life(global.Particle1,1,20) //this is its lifespan in steps...

//Create emitters and name them...
//global.Particle1_Emitter1=part_emitter_create(global.P_System);  //this will be the static emitter that streams
global.Particle1_Emitter2=part_emitter_create(global.P_System);  //this will be the moving emitter (with the mouse) that bursts

//Define emitter properties...
//part_emitter_region(global.P_System, global.Particle1_Emitter1, 0, room_width, 0, room_height, ps_shape_rectangle, ps_distr_linear);
part_emitter_region(global.P_System, global.Particle1_Emitter2, obj_player.x-10, obj_player.x+10, obj_player.y-10, obj_player.y+10, ps_shape_ellipse, ps_distr_gaussian);

//Use an emitter to stream particles...
//part_emitter_stream(global.P_System, global.Particle1_Emitter1, global.Particle1, 10);

//Set alarm to burst particles...
alarm[1]=30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_goto(rm_gameover);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Burst particles at the mouse

//First set the emitter position
//part_emitter_region(global.P_System, global.Particle1_Emitter2, obj_player.x-10, obj_player.x+10, obj_player.y-10, obj_player.y+10, ps_shape_ellipse, ps_distr_gaussian);
//Burst the particles
//part_emitter_burst(global.P_System, global.Particle1_Emitter2, global.Particle1, 30);
//Reser the alarm
//alarm[1]=30;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (button_pressed=="left"){
/*bullet1 = instance_create(x,y,obj_bullet);
bullet2 = instance_create(x,y,obj_bullet);
bullet3 = instance_create(x,y,obj_bullet);
*/

/*bullet1.direction=180-2;
bullet2.direction=180;
bullet3.direction=180+2;*/

bullet1 = instance_create(x,y-8,obj_bullet);
bullet2 = instance_create(x,y+8,obj_bullet);

bullet1.direction=180;
bullet2.direction=180;
}
else if (button_pressed=="right"){
/*bullet1 = instance_create(x,y,obj_bullet);
bullet2 = instance_create(x,y,obj_bullet);
bullet3 = instance_create(x,y,obj_bullet);

bullet1.direction=0-2;
bullet2.direction=0;
bullet3.direction=0+2;*/

bullet1 = instance_create(x,y-8,obj_bullet);
bullet2 = instance_create(x,y+8,obj_bullet);

bullet1.direction=0;
bullet2.direction=0;
}
else if (button_pressed=="up"){
/*bullet1 = instance_create(x,y,obj_bullet);
bullet2 = instance_create(x,y,obj_bullet);
bullet3 = instance_create(x,y,obj_bullet);

bullet1.direction=90-2;
bullet2.direction=90;
bullet3.direction=90+2;*/

bullet1 = instance_create(x-8,y,obj_bullet);
bullet2 = instance_create(x+8,y,obj_bullet);

bullet1.direction=90;
bullet2.direction=90;
}
else if (button_pressed=="down"){
/*bullet1 = instance_create(x,y,obj_bullet);
bullet2 = instance_create(x,y,obj_bullet);
bullet3 = instance_create(x,y,obj_bullet);

bullet1.direction=270-2;
bullet2.direction=270;
bullet3.direction=270+2;*/

bullet1 = instance_create(x-8,y,obj_bullet);
bullet2 = instance_create(x+8,y,obj_bullet);

bullet1.direction=270;
bullet2.direction=270;
}
else if (button_pressed=="left_down"){
/*bullet1 = instance_create(x,y,obj_bullet);
bullet2 = instance_create(x,y,obj_bullet);
bullet3 = instance_create(x,y,obj_bullet);

bullet1.direction=180+45-2;
bullet2.direction=180+45;
bullet3.direction=180+45+2;*/

bullet1 = instance_create(x-16,y+6,obj_bullet);
bullet2 = instance_create(x-6,y+16,obj_bullet);

bullet1.direction=180+45;
bullet2.direction=180+45;
}
else if (button_pressed=="left_up"){
/*bullet1 = instance_create(x,y,obj_bullet);
bullet2 = instance_create(x,y,obj_bullet);
bullet3 = instance_create(x,y,obj_bullet);

bullet1.direction=180-45-2;
bullet2.direction=180-45;
bullet3.direction=180-45+2;*/

bullet1 = instance_create(x-16,y-6,obj_bullet);
bullet2 = instance_create(x-6,y-16,obj_bullet);

bullet1.direction=180-45;
bullet2.direction=180-45;
}
else if (button_pressed=="right_down"){
/*bullet1 = instance_create(x,y,obj_bullet);
bullet2 = instance_create(x,y,obj_bullet);
bullet3 = instance_create(x,y,obj_bullet);

bullet1.direction=0-45-2;
bullet2.direction=0-45;
bullet3.direction=0-45+2;*/
bullet1 = instance_create(x+6,y+16,obj_bullet);
bullet2 = instance_create(x+16,y+6,obj_bullet);

bullet1.direction=-45;
bullet2.direction=-45;
}
else if (button_pressed=="right_up"){
/*bullet1 = instance_create(x,y,obj_bullet);
bullet2 = instance_create(x,y,obj_bullet);
bullet3 = instance_create(x,y,obj_bullet);

bullet1.direction=0+45-2;
bullet2.direction=0+45;
bullet3.direction=0+45+2;*/
bullet1 = instance_create(x+16,y-6,obj_bullet);
bullet2 = instance_create(x+6,y-16,obj_bullet);

bullet1.direction=45;
bullet2.direction=45;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>image_angle=direction;

part_type_direction(global.Particle1,obj_player.direction-180,obj_player.direction-180,0,0);

/*if instance_exists(obj_sinker){
    gravity=0.02; 
    gravity_direction=point_direction(x,y,obj_sinker.x,obj_sinker.y);
}
else{
    gravity=0; 
}*/

if (keyboard_check(ord('A'))) hspeed-=1;
if (keyboard_check(ord('D'))) hspeed+=1;
if (keyboard_check(ord('W'))) vspeed-=1;
if (keyboard_check(ord('S'))) vspeed+=1;

button_pressed="";

if (keyboard_check(vk_left)&amp;&amp;!keyboard_check(vk_up)&amp;&amp;!keyboard_check(vk_down)&amp;&amp;!keyboard_check(vk_right)){ 
    if (alarm[0]=-1) alarm = 10;
    button_pressed="left";
}

else if (keyboard_check(vk_right)&amp;&amp;!keyboard_check(vk_up)&amp;&amp;!keyboard_check(vk_down)&amp;&amp;!keyboard_check(vk_left)){
    if (alarm[0]=-1) alarm = 10;
    button_pressed="right";
}

else if (keyboard_check(vk_up)&amp;&amp;!keyboard_check(vk_left)&amp;&amp;!keyboard_check(vk_down)&amp;&amp;!keyboard_check(vk_right)){
    if (alarm[0]=-1) alarm = 10;
    button_pressed="up";
}

else if (keyboard_check(vk_down)&amp;&amp;!keyboard_check(vk_up)&amp;&amp;!keyboard_check(vk_left)&amp;&amp;!keyboard_check(vk_right)){
    if (alarm[0]=-1) alarm = 10;
    button_pressed="down";
}
else if (keyboard_check(vk_left)&amp;&amp;keyboard_check(vk_up)&amp;&amp;!keyboard_check(vk_down)&amp;&amp;!keyboard_check(vk_right)){ 
    if (alarm[0]=-1) alarm = 10;
    button_pressed="left_up";
}
else if (keyboard_check(vk_left)&amp;&amp;keyboard_check(vk_down)&amp;&amp;!keyboard_check(vk_right)&amp;&amp;!keyboard_check(vk_up)){ 
    if (alarm[0]=-1) alarm = 10;
    button_pressed="left_down";
}
else if (keyboard_check(vk_right)&amp;&amp;keyboard_check(vk_down)&amp;&amp;!keyboard_check(vk_left)&amp;&amp;!keyboard_check(vk_up)){ 
    if (alarm[0]=-1) alarm = 10;
    button_pressed="right_down";
}
else if (keyboard_check(vk_right)&amp;&amp;keyboard_check(vk_up)&amp;&amp;!keyboard_check(vk_down)&amp;&amp;!keyboard_check(vk_left)){ 
    if (alarm[0]=-1) alarm = 10;
    button_pressed="right_up";
}

if (keyboard_check(vk_enter)){
    score+=10;
}


if (speed&gt;6){
    speed=6;
}

x=min(x,room_width-16);
x=max(x,16);
y=min(y,room_height-16);
y=max(y,16);

//Particle System
if (speed&gt;0){
    part_particles_create(global.P_System, obj_player.x, obj_player.y, global.Particle1, 10);
}
else{
    part_particles_clear(global.P_System);
}



hit=instance_place(x,y,obj_pointer);

if (hit!=noone){
    instance_destroy();
}
hit=instance_place(x,y,obj_quad);
if (hit!=noone){
    instance_destroy();
}
hit=instance_place(x,y,obj_sinker);
if (hit!=noone){
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>
